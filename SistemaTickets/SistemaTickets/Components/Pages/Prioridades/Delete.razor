@page "/deleteprioridades/{PrioridadID:int}";

@inject PrioridadesService prioridadesservice;
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
    <div class="card-header bg-primary text-white text-center py-2 rounded">
        <h3 style="font-weight: bold;" class="mb-0 font-weight-bold">Eliminar Prioridades</h3>
    </div>

    <div class="card-body text-center">
        <div class="col-md-6 mb-3 mx-auto">
            <label style="font-weight: bold;" class="form-label font-weight-bold">ID:</label>
            <span>@prioridades.PrioridadId</span>
        </div>

        <div class="col-md-6 mb-3 mx-auto">
            <label style="font-weight: bold;" class="form-label font-weight-bold">Descripci&oacute;n:</label>
            <span>@prioridades.Descripcion</span>
        </div>

        <div class="col-md-6 mb-3 mx-auto">
            <label style="font-weight: bold;" class="form-label font-weight-bold">D&iacute;a Compromiso:</label>
            <span>@prioridades.DiasCompromiso</span>
        </div>

        <div class="col-md-12 mb-3 mx-auto">
            <p style="font-weight: bold;">&iquest;Seguro que deseas eliminar esta prioridad?</p>
        </div>

    </div>

    <div class="card-footer bg-light d-flex justify-content-center">
        <div class="btn-group">
            <button @onclick="Eliminar" type="button" class="btn btn-success btn-block"><span class="fas fa-check"></span> S&iacute;</button>
            <a href="/indexprioridades/" class="btn btn-danger btn-block"><span class="fas fa-times"></span> No</a>
        </div>
    </div>
</div>

    <div class="exito-contenedor-invalido" style="@fracasoContenedorEstilo">
        <div id="fracaso-mensaje" class="mensaje-contenedor">@mensajeFracaso</div>
    </div>
    <div class="exito-contenedor-valido" style="@exitoContenedorEstilo">
        <div id="exito-mensaje" class="mensaje-contenedor">@mensajeExito</div>
    </div>

@code {

    public Prioridades prioridades = new Prioridades();

    private string mensajeExito = "";
    private string mensajeFracaso = "";
    private string exitoContenedorEstilo = "display: none;";
    private string fracasoContenedorEstilo = "display: none;";


    [Parameter]
    public int PrioridadID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadID > 0)
        {
            prioridades.PrioridadId = PrioridadID;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var existe = await prioridadesservice.Buscar(prioridades.PrioridadId);
        if (existe != null)
        {
            prioridades = existe;
        }
        else
        {
            await MostrarMensaje("Prioridad no encontrada", "Invalido", "prioridadNoEncontrada.mp3");
        }
    }

    public async Task Eliminar()
    {
        var elimino = await prioridadesservice.Eliminar(this.prioridades);
        if (elimino)
        {
            await MostrarMensaje("Eliminado Existoso.", "Valido", "eliminadoExito.mp3");
            NavigationManager.NavigateTo("/indexprioridades");
        }
        else
        {
            await MostrarMensaje("Error Inesperado.", "Invalido", "errorinesperado.mp3");
        }
    }

    public async Task MostrarMensaje(string mensaje, string tipoMensaje, string audio)
    {
        if (tipoMensaje == "Valido")
        {
            mensajeExito = mensaje;
            exitoContenedorEstilo = "display: block;";
            fracasoContenedorEstilo = "display: none;";

            await ReproducirAudio(audio);

            await Task.Delay(4500);
            exitoContenedorEstilo = "display: none;";
            StateHasChanged();
        }
        else if (tipoMensaje == "Invalido")
        {
            mensajeFracaso = mensaje;
            fracasoContenedorEstilo = "display: block;";
            exitoContenedorEstilo = "display: none;";

            await ReproducirAudio(audio);

            await Task.Delay(4500);
            fracasoContenedorEstilo = "display: none;";
            StateHasChanged();
        }
    }

    private async Task ReproducirAudio(string audio)
    {
        await JSRuntime.InvokeVoidAsync("playAudio", "recursos/audios/" + audio);
    }
}
