@page "/indexcliente"

@inject ClientesService clienteservice;
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<EditForm Model="ListaClientes" class="border shadow-lg p-3 rounded">
    <div class="card-header bg-primary text-white text-center py-2 rounded">
        <h3 style="font-weight: bold;" class="mb-0 font-weight-bold">Centro de Clientes</h3>
    </div>
    <div class="card-body">
        <div class="row mb-3 align-items-end">
            <div class="col-md-3">
                <label style="font-weight: bold;" for="Filtro" class="form-label">Filtrar por:</label>
                <select @bind="filtro" class="form-select">
                    <option value="id">ID</option>
                    <option value="nombre">Nombre</option>
                    <option value="rnc">RNC</option>
                </select>
            </div>
            <div class="col-md-6">
                <label style="font-weight: bold;" for="ValorFiltro" class="form-label">B&uacute;squeda:</label>
                <div class="input-group">
                    <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                        <span class="fas fa-search"></span> Buscar
                    </button>
                </div>
            </div>
            <div class="col-md-3 text-end">
                <a href="/createCliente" class="btn btn-success" type="button"><span class="fas fa-plus"></span> Crear </a>
            </div>
        </div>
    </div>
    <table class="table table-bordered text-center">
        <thead class="bg-primary text-white">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>RNC</th>
                <th>Tel&eacute;fono</th>
                <th>Celular</th>
                <th>Email</th>
                <th>Direcci&oacute;n</th>
                <th>Editar</th>
                <th>Detalle</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @if (ListaClientes.Any())
            {
                @foreach (var cliente in ListaClientes)
                {
                    <tr>
                        <td>@cliente.ClienteId</td>
                        <td>@cliente.Nombres</td>
                        <td>@cliente.RNC</td>
                        <td>@cliente.Telefono</td>
                        <td>@cliente.Celular</td>
                        <td>@cliente.Email</td>
                        <td>@cliente.Direccion</td>
                        <td>
                            <a href="/editarCliente/@cliente.ClienteId" style="border: none; background-color: transparent;" class="btn-editar">
                                <img style="width: 32px; height: 32px;" src="./recursos/editar.png" alt="editar" />
                            </a>
                        </td>
                        <td>
                            <a href="/detailsCliente/@cliente.ClienteId" style="border: none; background-color: transparent;" class="btn-detalle">
                                <img style="width: 32px; height: 32px;" src="./recursos/detalle.png" alt="detalle" />
                            </a>
                        </td>
                        <td>
                            <a href="/deleteCliente/@cliente.ClienteId" style="border: none; background-color: transparent;" class="btn-eliminar">
                                <img style="width: 32px; height: 32px;" src="./recursos/eliminar.png" alt="eliminar" />
                            </a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="10" class="text-center">No se ha encontrado ningun cliente.</td>
                </tr>
            }
        </tbody>
    </table>
</EditForm>




<div class="exito-contenedor-invalido" style="@fracasoContenedorEstilo">
    <div id="fracaso-mensaje" class="mensaje-contenedor">@mensajeFracaso</div>
</div>
<div class="exito-contenedor-valido" style="@exitoContenedorEstilo">
    <div id="exito-mensaje" class="mensaje-contenedor">@mensajeExito</div>
</div>



@code {

    public Clientes clientes = new Clientes();

    private string mensajeExito = "";
    private string mensajeFracaso = "";
    private string exitoContenedorEstilo = "display: none;";
    private string fracasoContenedorEstilo = "display: none;";

    private string filtro = "id";
    private string valorFiltro = "";

    public List<Clientes> ListaClientes = new List<Clientes>();

    protected override async Task OnInitializedAsync()
    {
        ListaClientes = await clienteservice.Listar(c => true);
    }


    public async Task Guardar()
    {
        var guardo = await clienteservice.Guardar(clientes);
        if (guardo)
        {
            await OcultarForm();
            await MostrarMensaje("Guardado Existoso.", "Valido", "guardadoExito.mp3");         
        }
        else
        {
            await MostrarMensaje("El Nombre o RNC ya exite...", "Invalido", "datosexiste.mp3");
        }
    }


    public async Task OcultarForm()
    {
        ListaClientes = await clienteservice.Listar(c => true);
    }


    private async Task Buscar()
    {
        if (valorFiltro.Trim() != "")
        {
            if (filtro == "id" && int.TryParse(valorFiltro, out int clienteId))
            {
                ListaClientes = await clienteservice.Listar(c => c.ClienteId == clienteId);
            }

            else if (filtro == "nombre")
            {
                ListaClientes = await clienteservice.Listar(c => c.Nombres == valorFiltro);
            }
            else if (filtro == "rnc")
            {
                ListaClientes = await clienteservice.Listar(c => c.RNC == valorFiltro);
            }

            if (ListaClientes == null || ListaClientes.Count == 0)
            {
                await MostrarMensaje("Cliente no encontrado", "Invalido", "clientenoencontrado.mp3");
            }
        }
        else
        {
            ListaClientes = await clienteservice.Listar(c => true);
        }
    }


    public async Task MostrarMensaje(string mensaje, string tipoMensaje, string audio)
    {
        if (tipoMensaje == "Valido")
        {
            mensajeExito = mensaje;
            exitoContenedorEstilo = "display: block;";
            fracasoContenedorEstilo = "display: none;";

            await ReproducirAudio(audio);

            await Task.Delay(4500);
            exitoContenedorEstilo = "display: none;";
            StateHasChanged();
        }
        else if (tipoMensaje == "Invalido")
        {
            mensajeFracaso = mensaje;
            fracasoContenedorEstilo = "display: block;";
            exitoContenedorEstilo = "display: none;";

            await ReproducirAudio(audio);

            await Task.Delay(4500);
            fracasoContenedorEstilo = "display: none;";
            StateHasChanged();
        }
    }

    private async Task ReproducirAudio(string audio)
    {
        await JSRuntime.InvokeVoidAsync("playAudio", "recursos/audios/" + audio);
    }

}
